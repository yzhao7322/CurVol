% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hete_gof.R
\name{gof.fgarch}
\alias{gof.fgarch}
\title{Goodness-of-fit Test for Functional ARCH/GARCH Model}
\usage{
gof.fgarch(
  error_fit,
  sigma_fit,
  ortho_basis_matrix,
  y_2_proj_coefs,
  sigma_2_proj_coefs,
  para,
  K = NULL,
  pplot = NULL
)
}
\arguments{
\item{error_fit}{the residuals obtained by fitting functional curve data with the Functional ARCH/GARCH model.}

\item{sigma_fit}{the fitted conditional volatility obtained from Functional ARCH/GARCH model.}

\item{ortho_basis_matrix}{the data-driven basis functions that are used to project functional curve data to scalar scores.}

\item{y_2_proj_coefs}{the projection scores of the functional curve data on data-driven bases.}

\item{sigma_2_proj_coefs}{the projection scores of the conditional volatility curves on data-driven bases.}

\item{para}{the estimated parameter space of the Functional ARCH/GARCH model.}

\item{K}{the statistic will be based on H lag autocorrelation coefficients. If it is missing, a default value "K=20" is used.}

\item{pplot}{an optional argument to compute and plot the P-values as a function of K, K=1,2,...,20. If pplot=1, the p-values will be computed and figured; if it is missing, this step will be skipped.}
}
\value{
The P_value of the \eqn{M_{N,K}} statistic.
}
\description{
gof.fgarch function approximates the P-value of the \eqn{M_{N,K}} statistics accounting for the effect of functional GARCH parameter estimation.
}
\details{
The test statistic used is as the same as the \eqn{M_{N,K}} statistic in \code{\link{fun_hetero}}. However, the asymptotic distribution is adjusted to account for the estimation effect, because the model residual depends on the joint asymptotics of the innovation process and the estimated parameters. We assume that the kernel parameters are consistently estimated by the Least Squares method proposed in Aue et al. (2017). Then, the asymptotic distribution of the statistic \eqn{M_{N,K}} is given in Theorem 3.1 in Rice et al. (2020).
}
\examples{
# generate discrete evaluations of the FARCH process.
grid_point=50; N=200
yd = dgp.farch(grid_point, N)
yd = yd$arch_mat
ba = basis.tfpca(yd,M=2)
basis_est = ba$basis
# fit the curve data and forecast the conditional volatility with an FGARCH(1,1) model.
fd = fda::Data2fd(argvals=seq(0,1,len = grid_point),y=yd,fda::create.bspline.basis(nbasis = 32))
y_inp = basis.score(fd,as.matrix(basis_est[,1]))
arch1_est = est.fArch(y_inp)
diag_arch = diagnostic.fGarch(arch1_est,basis_est[,1],yd)
# get the projection scores of the functional curve data on data-driven bases.
y2_proj_coefs = diag_arch$yproj
# get the fitted conditional volatility obtained from the FARCH(1) model.
sigma_fit = diag_arch$sigma2[,1:N]
# get the residuals obtained from the FARCH(1) model.
error_fit = diag_arch$eps
# get the projection scores of the conditional volatility curves on data-driven bases.
sigma2_proj_coefs = diag_arch$sigproj
# get the scalar parameters in the estimated parameter space.
para = c(as.vector(arch1_est$d),as.vector(arch1_est$As[[1]]))

# test the adequacy of the FARCH(1) model.
gof.fgarch(error_fit,sigma_fit,basis_est[,1],y2_proj_coefs,sigma2_proj_coefs,para,K=3)

}
\references{
Aue, A., Horvath, L., F. Pellatt, D. (2017). Functional generalized autoregressive conditional heteroskedasticity. Journal of Time Series Analysis, 38(1), 3-21.\cr
Rice, G., Wirjanto, T., Zhao, Y. (2020). Tests for conditional heteroscedasticity of functional data. Journal of Time Series Analysis.
}
\seealso{
\code{\link{basis.tfpca}} \code{\link{basis.score}} \code{\link{est.fGarch}} \code{\link{diagnostic.fGarch}}
}
